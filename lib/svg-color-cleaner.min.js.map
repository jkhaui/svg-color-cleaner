{"version":3,"sources":["webpack://svg-color-cleaner/webpack/universalModuleDefinition","webpack://svg-color-cleaner/./src/index.js","webpack://svg-color-cleaner/./src/SVGColorCleaner.js","webpack://svg-color-cleaner/webpack/bootstrap","webpack://svg-color-cleaner/webpack/startup","webpack://svg-color-cleaner/webpack/runtime/define property getters","webpack://svg-color-cleaner/webpack/runtime/hasOwnProperty shorthand"],"names":["root","factory","exports","module","define","amd","self","this","SVGColorCleaner","fillColor","strokeColor","newSvg","node","hasFillAttribute","hasAttribute","FILL_ATTRIBUTE","window","getComputedStyle","getPropertyValue","hasStrokeAttribute","STROKE_ATTRIBUTE","removeAttribute","setAttribute","FILL_COLOR","STROKE_COLOR","appendChild","oldSvg","_stroke","getAttribute","_fill","WIDTH_ATTRIBUTE","_width","HEIGHT_ATTRIBUTE","_height","VIEWBOX_ATTRIBUTE","_viewBox","nodeName","SVG_NODE","copySvgAttributes","RECT_NODE","TEXT_NODE","CIRCLE_NODE","PATH_NODE","mutateAttribute","DEFS_NODE","GLOBAL_NODE","grandchildNodes","childNodes","grandchildrenCollection","i","length","traverseChildren","CLIPPATH_NODE","MASK_NODE","fileData","parser","DOMParser","vDom","parseFromString","children","document","createElementNS","childrenCollection","all","parentLength","throwError","mutate","Error","removeChild","serializer","XMLSerializer","stringifiedSvg","serializeToString","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"mappings":"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","file":"svg-color-cleaner.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"svg-color-cleaner\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"svg-color-cleaner\"] = factory();\n\telse\n\t\troot[\"svg-color-cleaner\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","import SVGColorCleaner from \"./SVGColorCleaner.js\";\n\nexport default { SVGColorCleaner };\n","export default class SVGColorCleaner {\n  constructor({\n    fillColor = \"#000\",\n    strokeColor = \"#000\",\n  }) {\n    // Define global variables.\n    this.FILL_ATTRIBUTE = \"fill\";\n    this.SVG_NODE = \"svg\";\n\n    // Low-level nodes.\n    this.PATH_NODE = \"path\";\n    this.RECT_NODE = \"rect\";\n    this.CIRCLE_NODE = \"circle\";\n    this.TEXT_NODE = \"#text\";\n\n    // Wrapper nodes.\n    this.GLOBAL_NODE = \"g\";\n    this.MASK_NODE = \"mask\";\n    this.DEFS_NODE = \"defs\";\n    this.CLIPPATH_NODE = \"clipPath\";\n\n    this.STROKE_ATTRIBUTE = \"stroke\";\n\n    // SVG attributes to be copied onto the virtual SVG.\n    this.WIDTH_ATTRIBUTE = \"width\";\n    this.HEIGHT_ATTRIBUTE = \"height\";\n    this.VIEWBOX_ATTRIBUTE = \"viewBox\";\n\n    this.FILL_COLOR = fillColor;\n    this.STROKE_COLOR = strokeColor;\n  }\n\n  mutateAttribute = (newSvg, node) => {\n    const hasFillAttribute =\n      node.hasAttribute(this.FILL_ATTRIBUTE) ||\n      window\n        .getComputedStyle(node)\n        .getPropertyValue(this.FILL_ATTRIBUTE) !== \"none\";\n    const hasStrokeAttribute =\n      node.hasAttribute(this.STROKE_ATTRIBUTE) ||\n      window\n        .getComputedStyle(node)\n        .getPropertyValue(this.STROKE_ATTRIBUTE) !== \"none\";\n\n    if (hasFillAttribute) {\n      node.removeAttribute(this.FILL_ATTRIBUTE);\n      node.setAttribute(\"style\", `fill: ${this.FILL_COLOR}`);\n    }\n\n    // TODO: FInd a way to handle transparent strokes.\n    if (hasStrokeAttribute) {\n      node.removeAttribute(this.STROKE_ATTRIBUTE);\n      node.setAttribute(\"style\", `stroke: ${this.STROKE_COLOR}`);\n    }\n\n    newSvg.appendChild(node);\n  };\n\n  copySvgAttributes = (oldSvg, newSvg) => {\n    if (oldSvg.hasAttribute(this.STROKE_ATTRIBUTE)) {\n      const _stroke = oldSvg.getAttribute(this.STROKE_ATTRIBUTE);\n\n      if (_stroke) {\n        newSvg.setAttribute(this.STROKE_ATTRIBUTE, _stroke);\n      }\n    }\n    if (oldSvg.hasAttribute(this.FILL_ATTRIBUTE)) {\n      const _fill = oldSvg.getAttribute(this.FILL_ATTRIBUTE);\n\n      if (_fill) {\n        newSvg.setAttribute(this.FILL_ATTRIBUTE, _fill);\n      }\n    }\n    if (oldSvg.hasAttribute(this.WIDTH_ATTRIBUTE)) {\n      const _width = oldSvg.getAttribute(this.WIDTH_ATTRIBUTE);\n\n      if (_width) {\n        newSvg.setAttribute(this.WIDTH_ATTRIBUTE, _width);\n      }\n    }\n    if (oldSvg.hasAttribute(this.HEIGHT_ATTRIBUTE)) {\n      const _height = oldSvg.getAttribute(this.HEIGHT_ATTRIBUTE);\n\n      if (_height) {\n        newSvg.setAttribute(this.HEIGHT_ATTRIBUTE, _height);\n      }\n    }\n    if (oldSvg.hasAttribute(this.VIEWBOX_ATTRIBUTE)) {\n      const _viewBox = oldSvg.getAttribute(this.VIEWBOX_ATTRIBUTE);\n\n      if (_viewBox) {\n        newSvg.setAttribute(this.VIEWBOX_ATTRIBUTE, _viewBox);\n      }\n    }\n  };\n\n  traverseChildren = (oldSvg, newSvg, node) => {\n    const nodeType = node.nodeName;\n\n    switch (nodeType) {\n      case this.SVG_NODE:\n        this.copySvgAttributes(oldSvg, newSvg, node);\n        break;\n      // TODO: do NOT apply styling to rect nodes for now... It appears to\n      // ruin the svg.\n      case this.RECT_NODE:\n      case this.TEXT_NODE:\n        break;\n      case this.CIRCLE_NODE:\n      case this.PATH_NODE:\n        this.mutateAttribute(newSvg, node);\n        break;\n      case this.DEFS_NODE:\n      case this.GLOBAL_NODE:\n        // Declare a variable with (what is assumed to be) the low-level SVG\n        // element.\n        const grandchildNodes = node.childNodes;\n        const grandchildrenCollection = grandchildNodes;\n        const grandchildrenLength = grandchildNodes.length;\n\n        // const grandchildNodeType = grandchildNodes.nodeName;\n        // const hasGreatGrandChildren =\n        //   grandchildNodes.length > 0;\n        // const grandchildNodeCount = grandchildNodes.length;\n\n        let i = -1;\n\n        if (++i < grandchildrenLength) {\n          do {\n            if (grandchildrenCollection[i]) {\n              this.traverseChildren(oldSvg, newSvg, grandchildrenCollection[i]);\n            }\n          }\n          while (++i < grandchildrenCollection);\n        }\n\n        // First-child nodes, e.g. <g>, <defs>, etc.\n        // if (++i < grandchildNodeCount) do {\n        //   console.log(grandchildrenCollection[i]);\n        //   if (hasGreatGrandChildren) {\n        //     // TODO: handle recursive looping through n layers of child\n        // nodes. // const greatGrandChild = ... //\n        // this.mutateAttribute(greatGrandChild); return; } } while (++i <\n        // grandchildNodeCount);\n        break;\n      case this.CLIPPATH_NODE:\n      case this.MASK_NODE:\n      default:\n        // An exception error message is passed back to the caller if any of\n        // the above nodes, or otherwise unknown node types, are detected.\n        return false;\n    }\n  };\n\n  renderVirtualSvg = async (fileData) => {\n    // 1. Instantiate a new virtual DOM instance.\n    // This creates an empty document node in-memory, with an empty svg element\n    // as the single child node.\n    const parser = new DOMParser();\n    const vDom = parser.parseFromString(fileData, \"image/svg+xml\");\n    const oldSvg = vDom.children[0];\n\n    const newSvg =\n      document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    const childrenCollection = vDom.all;\n\n    // Cache the length prop to maximise performance.\n    const parentLength = childrenCollection.length;\n\n    let i = -1;\n    let throwError = false;\n\n    // 2. Iterate through, and extract, all the low-level SVG elements.\n    if (++i < parentLength) {\n      do {\n        if (childrenCollection[i]) {\n          const mutate = this.traverseChildren(\n            oldSvg,\n            newSvg,\n            childrenCollection[i],\n          );\n          if ((childrenCollection[i] || {}).nodeName ===\n              this.PATH_NODE && i > 0) {\n            i--;\n          }\n\n          if (mutate === false) {\n            throwError = true;\n          }\n        }\n      }\n      while (++i < parentLength);\n    }\n\n    if (throwError) {\n      return Error(\"Unidentified node type.\");\n    }\n\n    vDom.removeChild(oldSvg);\n    vDom.appendChild(newSvg);\n    const serializer = new XMLSerializer();\n    const stringifiedSvg = serializer.serializeToString(vDom);\n\n    // Returns the cleaned SVG string as a promise, if successful.\n    return stringifiedSvg;\n  };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(599);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}